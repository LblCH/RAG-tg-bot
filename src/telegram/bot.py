import os
import sys
import logging
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CommandHandler
from telegram.helpers import escape_markdown
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from utils.logger import log_interaction
from utils.filters import is_valid_query

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_ENDPOINT = os.getenv("API_ENDPOINT", "http://localhost:8000/ask")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SFN Chatbot!*\n\n"
        "–Ø –ò–ò-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö, –ø–∞–µ–≤—ã—Ö —Ñ–æ–Ω–¥–∞—Ö –∏ —Ä–∞–±–æ—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ *–û–û–û ¬´–°–§–ù¬ª*.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Äî –ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–∞–π?\n"
        "‚Äî –ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –ó–ü–ò–§?\n"
        "‚Äî –ù—É–∂–Ω–æ –ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –ø–∞—ë–≤?\n\n"
        "–Ø –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ.\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –£–¥–∞—á–∏!"
    )
    safe_welcome_text = escape_markdown(welcome_text, version=2)
    await update.message.reply_markdown_v2(safe_welcome_text)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()

    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.")
        return

    if not is_valid_query(query):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
        return

    try:
        response = requests.get(API_ENDPOINT, params={"query": query}, timeout=30)
        response.raise_for_status()
        data = response.json()

        answer = data.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.")
        sources = data.get("sources", [])
        escaped_answer = escape_markdown(answer, version=2)
        escaped_sources = [escape_markdown(s["url"], version=2) for s in sources]
        source_text = "\n".join([f"üîó {s}" for s in escaped_sources]) if sources else ""

        reply = f"*–û—Ç–≤–µ—Ç:*\n{escaped_answer}\n\n*–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n{source_text}"
        log_interaction(
            query=query,
            answer=answer,
            sources=[s["url"] for s in sources],
            source="telegram",
            user_id=update.effective_user.id
        )
        await update.message.reply_markdown_v2(reply)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ .env")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.add_handler(CommandHandler("start", start_command))
    app.run_polling()
